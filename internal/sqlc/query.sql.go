// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
)

const createGithubUser = `-- name: CreateGithubUser :one
INSERT INTO GithubUsers (
  name
) VALUES (
  ?
)
RETURNING id, name
`

func (q *Queries) CreateGithubUser(ctx context.Context, name string) (GithubUser, error) {
	row := q.db.QueryRowContext(ctx, createGithubUser, name)
	var i GithubUser
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteGithubUser = `-- name: DeleteGithubUser :exec
DELETE FROM GithubUsers
WHERE id = ?
`

func (q *Queries) DeleteGithubUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGithubUser, id)
	return err
}

const getGithubUser = `-- name: GetGithubUser :one
SELECT id, name FROM GithubUsers
WHERE name = ? LIMIT 1
`

func (q *Queries) GetGithubUser(ctx context.Context, name string) (GithubUser, error) {
	row := q.db.QueryRowContext(ctx, getGithubUser, name)
	var i GithubUser
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listGithubUsers = `-- name: ListGithubUsers :many
SELECT id, name FROM GithubUsers
ORDER BY name
`

func (q *Queries) ListGithubUsers(ctx context.Context) ([]GithubUser, error) {
	rows, err := q.db.QueryContext(ctx, listGithubUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GithubUser
	for rows.Next() {
		var i GithubUser
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGithubUser = `-- name: UpdateGithubUser :one
UPDATE GithubUsers
set name = ?
WHERE id = ?
RETURNING id, name
`

type UpdateGithubUserParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateGithubUser(ctx context.Context, arg UpdateGithubUserParams) (GithubUser, error) {
	row := q.db.QueryRowContext(ctx, updateGithubUser, arg.Name, arg.ID)
	var i GithubUser
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
